const express = require('express');
const fs = require('fs');
const path = require('path');
const app = express();
app.use(express.json());

const USERS_FILE = path.join(__dirname, 'allusers.json');
const BOTS_FILE = path.join(__dirname, 'allbots.json');
const BOTREPOS_FILE = path.join(__dirname, 'botrepos.json');

function readJsonFile(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      fs.writeFileSync(filePath, JSON.stringify([], null, 2));
      return [];
    }
    const data = fs.readFileSync(filePath, 'utf8');
    return JSON.parse(data);
  } catch {
    return [];
  }
}

function writeJsonFile(filePath, data) {
  fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
}

// ----------- USERS -------------

app.get('/api/users', (req, res) => {
  const users = readJsonFile(USERS_FILE);
  res.json(users);
});

app.get('/api/users/:username', (req, res) => {
  const users = readJsonFile(USERS_FILE);
  const user = users.find(u => u.username === req.params.username);
  if (!user) return res.status(404).json({ message: 'User not found' });
  res.json(user);
});

app.post('/api/users', (req, res) => {
  const users = readJsonFile(USERS_FILE);
  users.push(req.body);
  writeJsonFile(USERS_FILE, users);
  res.json({ message: 'User added' });
});

app.put('/api/users/:username', (req, res) => {
  const users = readJsonFile(USERS_FILE);
  const idx = users.findIndex(u => u.username === req.params.username);
  if (idx === -1) return res.status(404).json({ message: 'User not found' });
  users[idx] = { ...users[idx], ...req.body };
  writeJsonFile(USERS_FILE, users);
  res.json({ message: 'User updated' });
});

app.delete('/api/users/:username', (req, res) => {
  const users = readJsonFile(USERS_FILE);
  const newUsers = users.filter(u => u.username !== req.params.username);
  if (newUsers.length === users.length) return res.status(404).json({ message: 'User not found' });
  writeJsonFile(USERS_FILE, newUsers);
  res.json({ message: 'User deleted' });
});

// ----------- BOTS -------------

app.delete('/api/bots/:name', (req, res) => {
  let bots = readJsonFile(BOTS_FILE);
  const newBots = bots.filter(b => b.name !== req.params.name);
  if (newBots.length === bots.length) return res.status(404).json({ message: 'Bot not found' });
  writeJsonFile(BOTS_FILE, newBots);
  res.json({ message: 'Bot deleted' });
});

app.get('/api/bots', (req, res) => {
  const bots = readJsonFile(BOTS_FILE);
  res.json(bots);
});

app.get('/api/bots/:name', (req, res) => {
  const bots = readJsonFile(BOTS_FILE);
  const bot = bots.find(b => b.name === req.params.name);
  if (!bot) return res.status(404).json({ message: 'Bot not found' });
  res.json(bot);
});

app.post('/api/bots', (req, res) => {
  const bots = readJsonFile(BOTS_FILE);
  bots.push(req.body);
  writeJsonFile(BOTS_FILE, bots);
  res.json({ message: 'Bot added' });
});

app.put('/api/bots/:name', (req, res) => {
  const bots = readJsonFile(BOTS_FILE);
  const idx = bots.findIndex(b => b.name === req.params.name);
  if (idx === -1) return res.status(404).json({ message: 'Bot not found' });
  bots[idx] = { ...bots[idx], ...req.body };
  writeJsonFile(BOTS_FILE, bots);
  res.json({ message: 'Bot updated' });
});

app.delete('/api/bots/:name', (req, res) => {
  const bots = readJsonFile(BOTS_FILE);
  const newBots = bots.filter(b => b.name !== req.params.name);
  if (newBots.length === bots.length) return res.status(404).json({ message: 'Bot not found' });
  writeJsonFile(BOTS_FILE, newBots);
  res.json({ message: 'Bot deleted' });
});

// ----------- BOT REPOS -------------

app.get('/api/botrepos', (req, res) => {
  const repos = readJsonFile(BOTREPOS_FILE);
  res.json(repos);
});

app.get('/api/botrepos/:name', (req, res) => {
  const repos = readJsonFile(BOTREPOS_FILE);
  const repo = repos.find(r => r.name === req.params.name);
  if (!repo) return res.status(404).json({ message: 'Bot repo not found' });
  res.json(repo);
});

app.post('/api/botrepos', (req, res) => {
  const repos = readJsonFile(BOTREPOS_FILE);
  repos.push(req.body);
  writeJsonFile(BOTREPOS_FILE, repos);
  res.json({ message: 'Bot repo added' });
});

app.put('/api/botrepos/:name', (req, res) => {
  const repos = readJsonFile(BOTREPOS_FILE);
  const idx = repos.findIndex(r => r.name === req.params.name);
  if (idx === -1) return res.status(404).json({ message: 'Bot repo not found' });
  repos[idx] = { ...repos[idx], ...req.body };
  writeJsonFile(BOTREPOS_FILE, repos);
  res.json({ message: 'Bot repo updated' });
});

app.delete('/api/botrepos/:name', (req, res) => {
  const repos = readJsonFile(BOTREPOS_FILE);
  const newRepos = repos.filter(r => r.name !== req.params.name);
  if (newRepos.length === repos.length) return res.status(404).json({ message: 'Bot repo not found' });
  writeJsonFile(BOTREPOS_FILE, newRepos);
  res.json({ message: 'Bot repo deleted' });
});

const PORT = 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));